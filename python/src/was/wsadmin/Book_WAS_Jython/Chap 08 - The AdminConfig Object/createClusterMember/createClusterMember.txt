Creating a wsadmin script from scratch

  When I was gathering up the wsadmin sample/exmple scripts referenced by
the book, I realized that I couldn't find the original "createClusterMember"
script referenced on page 164.  Since I referenced it, I really needed to
recreate it, so that it could be available on the book website.

  At this point, I thought that it might be a good opportunity for me to
do this in a way to explain the process I tend to use when I decide to go
about creating a wsadmin script.  This would allow me to describe each and
every step, including missteps along the way.


- I started by opening the on-line documentation.
  To get there, I began by pointing my browser at the WebSphere
  Application Server Support page:

  http://www.IBM.com/software/webservers/appserv/was/support/

- Then, I clicked on the "Library" link in the left frame, which took
  me to:

  http://www.IBM.com/software/webservers/appserv/was/library/

- I selected the V 6.1 "tab", which took me to:

  http://www.IBM.com/software/webservers/appserv/was/library/v61/

- Scrolling down, I selected the "View page" under the "Network
  Deployment - distributed platforms" section, which took me to:

  WebSphere Application Server Network Deployment - distributed platforms

  http://www.IBM.com/software/webservers/appserv/was/library/v61/nd-dp/info-center.html

- The first entry under which is "WebSphere Application Server Network
  Deployment, Version 6.1", so I selected the "View page" link, which
  took me to:

  http://publib.boulder.ibm.com/infocenter/wasinfo/v6r1/index.jsp?topic=/com.ibm.websphere.nd.doc/info/welcome_nd.html

- Clicking on the "Search scope" link (by the "Go" button), opens a
  dialog box that lets me narrow the search.

- Clicking on the "New" button, opens another dialog box that shows
  all of the various document.

  I "select" (check) the "Network Deployment (Distributed platforms...),
  Version 6.1 document, and enter "6.1 ND" in the "List name" input box
  at the top, then click the "OK"

- This take you back to the "Select Search Scope" dialog box, where
  the newly created scope is selected by default.  Click the "OK"
  button.

- You should now see the "6.1 ND" beside the "Search scope" link.

- Enter "createClusterMember" (without the quotes) in the search input
  field, and press Enter, or click on the "Go" button.

- The first match displayed for me is "Creating cluster members using
  scripting"

- Clicking on this link takes us to:
  http://publib.boulder.ibm.com/infocenter/wasinfo/v6r1/index.jsp?topic=/com.ibm.websphere.nd.doc/info/ae/ae/txml_addcluster.html

- Since this script is being recreated for the AdminConfig scripting
  object, we'll focus only on that technique.

- Then, we focus on the Jython snippets, and see that they are:

  #----------------------------------------------------------------------
  # Identify the existing cluster and assign it to the cluster variable:
  #----------------------------------------------------------------------
  cluster = AdminConfig.getid('/ServerCluster:myCluster1/')
  print cluster

  #----------------------------------------------------------------------
  # Identify the node to create the new server and assign it to the node variable:
  #----------------------------------------------------------------------
  node = AdminConfig.getid('/Node:mynode/')
  print node

  #----------------------------------------------------------------------
  # (Optional) Identify the cluster member template and assign it to the
  # serverTemplate variable:
  #----------------------------------------------------------------------
  serverTemplate = AdminConfig.listTemplates('Server')
  print serverTemplate

  #----------------------------------------------------------------------
  # Create the new cluster member, by using the createClusterMember command.
  #----------------------------------------------------------------------
  # The following example creates the new cluster member, passing in the
  # existing cluster configuration ID, existing node configuration ID,
  # and the new member attributes:
  #----------------------------------------------------------------------
  AdminConfig.createClusterMember(cluster, node, [['memberName', 'clusterMember1']])

  #----------------------------------------------------------------------
  # The following example creates the new cluster member with a template,
  # passing in the existing cluster configuration ID, existing node
  # configuration ID, the new member attributes, and the template ID:
  #----------------------------------------------------------------------
  print AdminConfig.createClusterMember(cluster, node, [['memberName',  'clusterMember1']], serverTemplate)

  #----------------------------------------------------------------------
  # Save the configuration changes.
  #----------------------------------------------------------------------
  AdminConfig.save()

  #----------------------------------------------------------------------
  # It is kind of amusing to read the first part of step #3 which starts
  # with "In a network deployment environment only"... Where else can one
  # create a cluster member? ;-)
  #----------------------------------------------------------------------
  # Synchronize the node
  #----------------------------------------------------------------------
  Sync1 = AdminControl.completeObjectName('type=NodeSync,node=myNodeName,*')
  AdminControl.invoke(Sync1, 'sync')

- Things that this sequence doesn't do:
  * Verify that we're connected to an active server
    In fact, since the only scripting object with which we are working
    (at least up to the node synchronization step) is AdminConfig, we
    don't even have to be connected.  We could be in local mode.
  * Verify, or even select a "unique" & valid template
  * Verify that the specified cluster already exists, in which case,
    we really can't use the serverTemplate parameter...

? Do we have an easy way to determine if the script is being executed
  in "local mode"?
  Sure, we could use a simple function like this:

  #----------------------------------------------------------------------
  # Name: localMode()
  # Role: Return true (1) if the script is currently executing in "local
  #       mode", false (0) otherwise.
  # Note: It is possible for the connection to the server to be dropped,
  #       in which case, this routine will return true
  #----------------------------------------------------------------------
  def localMode() :
    result = 0;
    try :
      AdminControl.getType();
    except :
      result = 1;
    return result;

  This works because when the script is executing in local mode, any
  attempts to call an AdminControl method will result in an exception:
--------------------------------------------------------------------------------
WASX7015E: Exception running command: "AdminControl.getType()"; exception information:
 com.ibm.ws.scripting.ScriptingException: AdminControl service not available
--------------------------------------------------------------------------------

- So, how do we proceed?

  One way would be to simply take the command shown above, and turn
  them into a straight-line script.  Unfortunately, this isn't as
  useful as we would like since the command use "hard coded" values
  for the following:

  - cluster  name: myCluster1              Required
  - node     name: mynode                  Optional?
  - template name: ?                       Optional
  - member   name: clusterMember1          Required

- This seems to be a good list of possible parameters.  Let's start by
  putting some high level pseudo-code in place to see how things might
  fit together:

  #----------------------------------------------------------------------
  # Pseudo-code - Iteration 0
  #----------------------------------------------------------------------
  process user commandline parameters
  check for necessary & sufficient parameters
  if localMode() :
    ... How do we check to see what kind of profile is being used?
  else :
    ... What kind of profile is being used?

Q: Is it conceivable (theoretically possible) for the current profile to
   be an AppServer profile, or even a profile with only a nodeagent, and
   not appservers, or even a deployment manager without a nodeagent, or
   an appserver?
A: I don't know, let's test it out, and verify/validate things!

Q: How do we check to see what kind of profile is being used?
   This hilights the need for us to be able to determine the kind
   of profile being used, especially for a local mode scenario.

   #----------------------------------------------------------------------
   # What server configuration IDs are available?
   #----------------------------------------------------------------------
   servers = AdminConfig.list( 'Server' ).splitlines()

Q: How many entries are returned, and what kind?
   It's easy enough to determine how many are returned, but figuring out
   what kind of server they identify is a little trickier.
   
   If you obtained a copy of "WebSphere Application Server Administration
   using Jython" (ISBN-10: 0-13-700952-6), then you may be familiar with
   the WAuJ_utilities that is provided.  If so, and if you have configured
   your wsadmin.properties file properly, you can use:
   
   from WAuJ_utilities import showAsDict
   
   If not, you have to include the following function definition:
   
   #---------------------------------------------------------------------
   # Name: showAsDict.py
   # Role: Convert result of AdminConfig.show( configID ) to a dictionary
   # Note: Depends upon availability of AdminConfig scripting object
   #---------------------------------------------------------------------
   # Example use:
   # > servers = AdminConfig.list( 'Server' ).splitlines()
   # > svrDict = showAsDict( servers[ 0 ] )
   #---------------------------------------------------------------------
   def showAsDict( configID ) :
     'Return a dictionary of the AdminConfig.show( configID ) result.'
     result = {}
     try :
       #-----------------------------------------------------------------
       # The result of the AdminConfig.show() should be a string
       # containing many lines.  Each line of which starts and ends
       # with brackets.  The "name" portion should be separated from the
       # associated value by a space.
       #-----------------------------------------------------------------
       for item in AdminConfig.show( configID ).splitlines() :
         if ( item[ 0 ] == '[' ) and ( item[ -1 ] == ']' ) :
           ( key, value ) = item[ 1:-1 ].split( ' ', 1 )
           result[ key ] = value
     except NameError, e :
       print 'Name not found: ' + str( e )
     except :
       ( kind, value ) = sys.exc_info()[ :2 ]
       print 'Exception  type: ' + str( kind )
       print 'Exception value: ' + str( value )
     return result

Q: The real question, at this point, are any of the available servers a
   deployment manager?
   
   To determine this, we simply iterate over the available configuration
   ID's, and check the server type using something like:
   
   #---------------------------------------------------------------------
   # Name: DMpresent()
   # Role: Determine if any of the available server types is a Deployment
   #       Manager (DM)
   # Note: Returns true (1) if any of the available servers is a DM,
   #       otherwise, returns false (0)
   #---------------------------------------------------------------------
   def DMpresent() :
     for serverID in AdminConfig.list( 'Server' ).splitlines() :
       if showAsDict( serverID )[ 'serverType' ] == 'DEPLOYMENT_MANAGER' :
         return 1
     return 0

   Note how the dictionary returned by the showAsDict() routine is only
   used to check the server type of the specified configuration ID.  By
   using this method, we don't have to require that wsadmin be connected
   to an Application Server, so that the (possibly) more obvious
   AdminControl.getAttribute() method could be used (since it requires
   the MBean of active items)

   This bring me to an interesting question.
Q: Is it possible to be using a non-DM profile, and have the DM server
   information available and returned by AdminConfig.list( 'Server' )?
A: Apparently not.
   If server1 in AppSrv01 is a federated node, and we:
   wsadmin -conntype node -profileName AppSrv01
   The result of "print AdminConfig.list( 'Server' )" is:
--------------------------------------------------------------------------------
nodeagent(cells/ragdollCell01/nodes/ragdollNode02/servers/nodeagent|server.xml#Server_1223998662743)
server1(cells/ragdollCell01/nodes/ragdollNode02/servers/server1|server.xml#Server_1223998564405)
--------------------------------------------------------------------------------
   and the result of: "wsadmin -profileName AppSrv01" is:
--------------------------------------------------------------------------------
WASX7209I: Connected to process "dmgr" on node ragdollCellManager01 ...
--------------------------------------------------------------------------------
   which is identical to: "wsadmin -WAuJ -profileName Dmgr01"

- OK, let's improve our pseudo-code using the information and routines now
  available to us.

  #----------------------------------------------------------------------
  # Pseudo-code - Iteration 1
  #----------------------------------------------------------------------
  process user commandline parameters
  check for required/optional parameters
  if specified cluster exist :
    get clusterID
    if specified member exists :
      ... problem: duplicate cluster members are not allowed
    else :
      ... template can default
  else :
    ... problem: createClusterMember requires cluster to exist

  if node exists :
    get nodeID
  else :
    ... problem: node required

  if localMode() :
    if DMpresent() :
      createClusterMember()
      ... what else?
    else :
      ... createClusterMember doesn't make sense for this configuration
  else :
    if processType == 'DeploymentManager' :
      createClusterMember()
      ... what else?
    else :
      ... createClusterMember doesn't make sense for this configuration

- At this point, we need to ask ourselves
  Q: Do we really need to deal with the template parameter?
  A: Right now, it doesn't appear to add a whole lot to the script.
     Sometime in the future, it might.  If so, we can revise the script
     and add this new parameter as appropriate.

  Q: What else do we need to do after we createClusterMember()?
  A: Well, we certainly need to save the configuration changes.
  
  Q: Do we need to synchronize?
  A: Only if we are connected to a Deployment Manager
     Technically, we could also check to see if the node agents are
     active... but we'll leave that as a local improvement.

- So, what does the revised pseudo-code look like now?

  #----------------------------------------------------------------------
  # Pseudo-code - Iteration 2
  #----------------------------------------------------------------------
  process user commandline parameters
  check for required/optional parameters
    - cluster  name: myCluster1              Required
    - node     name: mynode                  Required
    - member   name: clusterMember1          Required
  if specified cluster exist :
    get clusterID
    if specified member exists :
      ... problem: duplicate cluster members are not allowed
  else :
    .. problem: createClusterMember requires cluster to exist

  if node exists :
    get nodeID
  else :
    ... problem: node required

  if localMode() :
    if DMpresent() :
      createClusterMember()
      save()
    else :
      ... problem: createClusterMember doesn't make sense for this configuration
  else :
    cell  = AdminControl.getCell()
    node  = AdminControl.getNode()
    oName = 'cell=%s,node=%s,type=Server,*' % ( cell, node )
    sObj  = AdminControl.completeObjectName( oName )
    pType = AdminControl.getAttribute( sObj, 'processType' )
    if pType == 'DeploymentManager' :
      createClusterMember()
      save()
      synchronize()
    else :
      ... problem: createClusterMember doesn't make sense for this configuration

Q: How do we determine whether or not the specified cluster exists?
A: Well, we might try to use something like:
--------------------------------------------------------------------------------
   print AdminConfig.list( 'Cluster' )
--------------------------------------------------------------------------------
   Unfortunately, it result in an exception: 
   ADMG0007E: The configuration data type Cluster is not valid.
   
   So, we have to figure out what the correct type is that we should use.  Let's
   see what types exist that contain "Cluster" somewhere in the type name:
--------------------------------------------------------------------------------   
wsadmin>for name in AdminConfig.types().splitlines() :
wsadmin>  if name.find( 'Cluster' ) > -1 :
wsadmin>    print name
wsadmin>
BackupCluster
ClusterAdvisor
ClusterMember
ClusteredTarget
GenericClusterRoute
GenericServerCluster
PMEClusterExtension
PluginServerClusterProperties
ServerCluster
--------------------------------------------------------------------------------   
   That last one looks very promising.  What do we get when we try to:
--------------------------------------------------------------------------------
   print AdminConfig.list( 'ServerCluster' )
--------------------------------------------------------------------------------
   If no clusters are defined, the result in an empty string.  If clusters are
   defined, we get a string containing all of the configuration IDs of the
   configured clusters.  For example:
--------------------------------------------------------------------------------
"Clust 01(cells/ragweedCell01/clusters/Clust 01|cluster.xml#ServerCluster_1250196164596)"
--------------------------------------------------------------------------------
   Note: The configuration ID is surrounded in double quotes when an embedded
         blank is present.
   OK, so to answer the question, we can use a routine something like this:

   def clusterExists( name ) :
     for cluster in AdminConfig.list( 'ServerCluster' ).splitlines() :
       if ( cluster[ 0 ] == '"' ) and ( cluster[ -1 ] == '"' ) :
         cluster = cluster[ 1:-1 ];         # Strip leading/trailing quotes
       cName = cluster.split( '(', 1 )[ 0 ] # Stuff before open parenthesis
       if cName == name :                   # Does this cluster name match?
         return 1;                          #   Yes - Specified name found
     return 0;                              # No matching cluster name found

Q: How do we determine whether or not the specified cluster exists?
A: Hm, this question is very similar to what we just asked.  I wonder if the
   solution is also similar?
   How do we list the configured Nodes?
--------------------------------------------------------------------------------
wsadmin>print AdminConfig.list( 'Node' )
ragweedCellManager01(cells/ragweedCell01/nodes/ragweedCellManager01|node.xml#Node_1)
ragweedNode01(cells/ragweedCell01/nodes/ragweedNode01|node.xml#Node_1)
wsadmin>
--------------------------------------------------------------------------------
   So, it looks like we might be able to take the clusterExists() function and
   make it more general if we add the configuration type as a parameter.

   def configItemExists( name, dataType ) :
     for configID in AdminConfig.list( dataType ).splitlines() :
       if ( configID[ 0 ] == '"' ) and ( configID[ -1 ] == '"' ) :
         configID = configID[ 1:-1 ];          # Strip leading/trailing quotes
       cName = configID.split( '(', 1 )[ 0 ];  # Stuff before open parenthesis
       if cName == name :                      # Does this config name match?
         return 1;                             #   Yes - Specified name found
     return 0;                                 # No matching cluster name found

Q: Can we use this same routine to find out if a specified Cluster Member exists?
A: Yes, simply by specifying dataType = 'ClusterMember'

- What does the code/pseudo-code look like now?

  #----------------------------------------------------------------------
  # Pseudo-code - Iteration 3
  #----------------------------------------------------------------------
  process user commandline parameters
  check for required/optional parameters
    - clusterName: myCluster1              Required
    - nodeName   : mynode                  Required
    - memberName : clusterMember1          Required
  if configItemExists( clusterName, 'ServerCluster' ) :
    get clusterID
    if specified member exists :
      ... problem: duplicate cluster members are not allowed
  else :
    .. problem: createClusterMember requires cluster to exist

  if configItemExists( nodeName, 'Node' ) :
    get nodeID
  else :
    ... problem: node required

  if localMode() :
    if DMpresent() :
      createClusterMember()
      save()
    else :
      ... problem: createClusterMember doesn't make sense for this configuration
  else :
    cell  = AdminControl.getCell()
    node  = AdminControl.getNode()
    oName = 'cell=%s,node=%s,type=Server,*' % ( cell, node )
    sObj  = AdminControl.completeObjectName( oName )
    pType = AdminControl.getAttribute( sObj, 'processType' )
    if pType == 'DeploymentManager' :
      createClusterMember()
      save()
      synchronize()
    else :
      ... problem: createClusterMember doesn't make sense for this configuration

- Hm. Looking at this, it seems that configItemExists() might be more
  useful if it returned the specified items configuration ID, instead
  of a simple true (1) / false (0) response.  What if we use this,
  instead?

  def getConfigID( name, dataType ) :
    for configID in AdminConfig.list( dataType ).splitlines() :
      ID = configID                           # Leave configID alone...
      if ( ID[ 0 ] == '"' ) and ( ID[ -1 ] == '"' ) :
        ID = ID[ 1:-1 ];                      # Strip leading/trailing quotes
      if name == ID.split( '(', 1 )[ 0 ] :    # Does this config name match?
        return configID;                      #   Yes - Specified  name found
    return '';                                # No matching config name found

- This allows us to refactor the code/pseudo-code as:

  #----------------------------------------------------------------------
  # Pseudo-code - Iteration 3
  #----------------------------------------------------------------------
  process user commandline parameters
  check for required/optional parameters
    - clusterName: myCluster1              Required
    - nodeName   : mynode                  Required
    - memberName : clusterMember1          Required
  clusterID = getConfigID( clusterName, 'ServerCluster' )
  if clusterID != '' :
    memberID = getConfigID( memberName, 'ClusterMember' )
    if memberID != '' :
      ... problem: duplicate cluster members are not allowed
  else :
    .. problem: createClusterMember requires cluster to exist

  nodeID = getConfigID( nodeName, 'Node' )
  if nodeID == '' :
    ... problem: node required

  if localMode() :
    if DMpresent() :
      createClusterMember()
      save()
    else :
      ... problem: createClusterMember doesn't make sense for this configuration
  else :
    cell  = AdminControl.getCell()
    node  = AdminControl.getNode()
    oName = 'cell=%s,node=%s,type=Server,*' % ( cell, node )
    sObj  = AdminControl.completeObjectName( oName )
    pType = AdminControl.getAttribute( sObj, 'processType' )
    if pType == 'DeploymentManager' :
      createClusterMember()
      save()
      synchronize()
    else :
      ... problem: createClusterMember doesn't make sense for this configuration

- This is really close to complete.
  If we review this, the following questions that might come to mind:
  
Q: Do we want to require the node name to be specified if only 1 (non-DM) node
   exists in the cell?

Q: Do we want to require the cluster name to be specified if only 1 cluster
   exists in the cell?

Q: If we changed these from "require" parameters to "optional" parameters, what
   might a sample command line invocation look like?
   
A: If the cell contains only 1 node, and only 1 cluster, then it would be as
   simple as:
   
   wsadmin -f createClusterMember --memberName newMemberName
   
   and if we specify the optional parameters, what would it look like?
   
   wsadmin -f createClusterMember --nodeName ragweedNode01 --clusterName "Clust 01" --memberName newMemberName
   
   We might want to consider shortening the verbose parameter switches to:
   
   wsadmin -f createClusterMember --node ragweedNode01 --cluster "Clust 01" --member newMemberName
   
Q: What about the "concise" (i.e., single character) parameter switches?
A: Well, we know that "-c" is not available for our scripts because it is used
   (and consumed by) wsadmin, so we can't use it for the "cluster" abbreviation.
   Maybe we could use -L instead?  This would allow the short form of the command
   to look like:
   
   wsadmin -f createClusterMember -n ragweedNode01 -L "Clust 01" -m newMemberName

   If we wanted to change the nodeName and clusterName parameters from
   required to optional, what would that do to our code/pseudo-code?

  #----------------------------------------------------------------------
  # Pseudo-code - Iteration 4
  #----------------------------------------------------------------------
  process user commandline parameters
  check for required/optional parameters
    - clusterName: myCluster1              Optional
    - nodeName   : mynode                  Optional
    - memberName : clusterMember1          Required
  
  if clusterName specified :
    clusterID = getConfigID( clusterName, 'ServerCluster' )
    if clusterID == '' :
       ... problem: Unknown clusterName specified
  else :
    clusters = AdminConfig.list( 'ServerCluster' ).splitlines()
    if len( clusters ) == 1 :
      clusterID = clusters[ 0 ]
    else :
      ... problem: clusterName not specified - ambiguous situation

  #----------------------------------------------------------------------
  # Here is where things get more interesting because we have a bit of a
  # problem.  What's the problem?  Well, if clustername and nodeName are
  # optional, then they may, or may not be specified.  What are the
  # possible scenarios:
  # 1. Simple case:
  #    - One DM node, one "cluster", one "non-DM" node, zero or more
  #      cluster members.
  #----------------------------------------------------------------------
  # Note: it "is" possible to remove the last clusterMember from a
  #       cluster, thus leaving it empty.
  #----------------------------------------------------------------------
  #    * We only need to verify that the specified memberName doesn't
  #      match any existing memberName.
  # 2. Not quite as simple case:
  #    - One DM node, one "cluster", multiple "non-DM" nodes, zero or
  #      more cluster members.
  #    * This means that the nodeName must be specified, and the
  #      specified memberName can't exist on the specified node.
  #      We have to check this, because it is possible to have cluster
  #      members on different nodes in the cell.  WebSphere AppServer
  #      allows a memberName to be duplicated in a cluster, as long as
  #      the name is unique within the node, WSAS doesn't have a problem
  #      keeping them straight.
  # 3. More complex case:
  #    - one DM node, multiple "clusters", one (or more) "non-DM" nodes,
  #      zero or more clusterMembers.
  #    * For this situation/scenario, clusterName and nodeName must be
  #      specified, and we have to check that both exist, and are valid,
  #      and that the specified memberName does not already exist on the
  #      given node.
  #----------------------------------------------------------------------
  # Here's an idea, let's require all the parameters, and let WebSphere
  # do the checking for us!  :-)
  # We leave the the "optional" parameters as an exercise for the
  # adventurous reader to implement.
  #----------------------------------------------------------------------
  # This means that we're going with Iteration #3.    
  #----------------------------------------------------------------------

- Let's start with some code to implement the parameter processing for
  the required parameters:
  Note: This version of the script is available in createClusterMember.00.py

*******************************************************************************
#---------------------------------------------------------------------
# Name: createClusterMember
# Role: Example script, created from scratch.
#       Iteration 0 - Process all command line parameters
#---------------------------------------------------------------------
import getopt, sys;

#---------------------------------------------------------------------
# Global dictionary to hold the user specified options & values
#---------------------------------------------------------------------
Opts = {};

#---------------------------------------------------------------------
# Name: parseOpts()
# Role: Process the user specified (command line) options
#---------------------------------------------------------------------
def parseOpts( cmdName ) :
  sOpts  = 'L:m:n:';
  lOpts  = 'clusterName=,memberName=,nodeName='.split( ',' );
  badOpt = '%(cmdName)s: Unknown/unrecognized parameter%(plural)s: %(argStr)s';
  optErr = '%(cmdName)s: Error encountered processing: %(argStr)s';

  try :
    opts, args = getopt.getopt( sys.argv, sOpts, lOpts );
  except getopt.GetoptError :
    argStr = ' '.join( sys.argv );
    print optErr % locals();
    Usage( cmdName );

  #-------------------------------------------------------------------
  # Initialize the global Opts dictionary using these keys (indexes)
  #-------------------------------------------------------------------
  keys = 'clusterName,memberName,nodeName'.split( ',' );
  for key in keys : Opts[ key ] = None;

  #-------------------------------------------------------------------
  # Process the list of options returned by getOpt()
  #-------------------------------------------------------------------
  for opt, val in opts :
    if opt in   ( '-L', '--clusterName' ) : Opts[ 'clusterName' ] = val
    elif opt in ( '-m', '--memberName' )  : Opts[ 'memberName' ] = val
    elif opt in ( '-n', '--nodeName' )    : Opts[ 'nodeName' ] = val


  #-------------------------------------------------------------------
  # Check for unhandled/unrecognized options
  #-------------------------------------------------------------------
  if ( args != [] ) :        # If any unhandled parms exist => error
    argStr = ' '.join( args )
    plural = ''
    if ( len( args ) > 1 ) : plural = 's'
    print badOpt % locals()
    Usage( cmdName )

#---------------------------------------------------------------------
# Name: Usage()
# Role: Display script usage information, and exit (terminate script)
#---------------------------------------------------------------------
def Usage( cmdName ):
  print '''
Command: %(cmdName)s\n
Purpose: WebSphere (wsadmin) script used to create a new cluster member.
  Usage: %(cmdName)s [options]\n
Required switches:
  -L | --clusterName <name> = Name of existing cluster to which member
                              is to be added.
  -m | --memberName  <name> = Name of member to be created
  -n | --nodeName    <name> = Name of node onto which member is to be
                              created.
\nNotes:
- Long form option values may be separated/delimited from their associated
  value using either a space, or an equal sign ('=').\n
- Short form option values may be sepearated from their associated value using
  an optional space.\n
- Text containing blanks should be enclosed in double quotes.\n
Examples:  [Note: all of the following should examples be entered on one line.]
  wsadmin -lang jython -f %(cmdName)s.py --clusterName=C1 --nodeName N1 --memberName M1\n
  wsadmin -lang jython -f %(cmdName)s.py -LC1 -m M1 -n Node01
''' % locals()
  sys.exit( 1 )

#---------------------------------------------------------------------
# Name: createClusterMember()
# Role: Function used to create a new cluster member
#---------------------------------------------------------------------
def createClusterMember( cmdName = 'createClusterMember' ) :
  fewParms = '%(cmdName)s: Insufficient parameters provided.'

  argc = len( sys.argv );                   # Number of arguments
  if ( argc < 3 ) :                         # If too few are present,
    print fewParms % locals();              #   tell the user, and
    Usage( cmdName );                       #   provide the Usage info
  else :                                    # otherwise
    parseOpts( cmdName );                   #   parse the command line

  #-------------------------------------------------------------------
  # Assign values from the user Options dictionary, to make value
  # access simplier, and easier.  For example, instead of using:
  #   Opts[ 'clusterName' ]
  # we will be able to simply use:
  #   clusterName
  # to access the value.  Additionally, this allows us to make use of
  # mapped error messages (e.g., see unknownNode below).
  #-------------------------------------------------------------------
  for key in Opts.keys() :
    cmd = '%s=Opts["%s"]' % ( key, key );
    exec( cmd );

  #-------------------------------------------------------------------
  # Result of parsing command line parameters
  #-------------------------------------------------------------------
  parms = '%(cmdName)s: --clusterName %(clusterName)s --memberName %(memberName)s --nodeName %(nodeName)s';
  print parms % locals();

#---------------------------------------------------------------------
# Role: main entry point
# Note: This is where execution begins.
#---------------------------------------------------------------------
if ( __name__ == 'main' ) or ( __name__ == '__main__' ) :
  createClusterMember();
else :
  Usage( __name__ );
*******************************************************************************


- Sample execution looks like this:

./wsadmin.sh -WAuJ -f ~bob/createClusterMember.py -LC -nN -mM
WASX7209I: Connected to process "dmgr" on node ragdollCellManager01 using SOAP connector;  The type of process is: DeploymentManager
WASX7303I: The following options are passed to the scripting environment and are available as arguments that are stored in the argv variable: "[-WAuJ, -LC, -nN, -mM]"
createClusterMember: --clusterName C --memberName M --nodeName N

- Next, we need to add code to check that all required parameters have
  been specified.  To do this, we only needed to add:
  Note: This version of the script is available in createClusterMember.01.py
  
  #-------------------------------------------------------------------
  # Verify that all required parameters have been specified.
  #-------------------------------------------------------------------
  error = 0;
  for parm in 'clusterName,memberName,nodeName'.split( ',' ) :
    if not Opts[ parm ] :
      print required % locals();
      error += 1;
      
  if error > 0 :
    Usage( cmdName );

- Then, we need to add code to check that the specified cluster exists
  and is unambiguous.
  Note: This version of the script is available in createClusterMember.02.py

  We can do this using the getConfigID() routine described above.  But
  if we change it slightly, it can be even more useful.  Instead of
  simply returning the first matching configID, we can have it return
  all matching configuration IDs.  Why would we need to do that?  Well,
  consider the situation where we have multiple servers with the same
  name (e.g., "server1"), wouldn't it be more useful if the routine
  returned all of them, so that we could then decide which one we want
  to use?
  
  Since we're going to return zero or more configuration IDs, let's
  also change the name of the routine to be more aligned with this
  possibility:
  
  #---------------------------------------------------------------------
  # Name: getConfigIDs()
  # Role: Function used find, and return a string containing all
  #       matching configuration IDs.
  # e.g., We can have multiple Cluster Members with the same name as
  #       long as each name is unique to the node on which it is
  #       configured.
  #---------------------------------------------------------------------
  def getConfigIDs( name, dataType ) :
    result = [];                              # Start with an empty list
    for configID in AdminConfig.list( dataType ).splitlines() :
      ID = configID                           # Leave configID alone...
      if ( ID[ 0 ] == '"' ) and ( ID[ -1 ] == '"' ) :
        ID = ID[ 1:-1 ];                      # Strip leading/trailing quotes
      if name == ID.split( '(', 1 )[ 0 ] :    # Does this config name match?
        result.append( configID );            #   Yes - Specified  name found
    return '\n'.join( result );               # Return string of all matches

- The code that makes use of this routine to check if a cluster exists
  is then as simple as:
  
  #-------------------------------------------------------------------
  # Does the cluster exist?
  #-------------------------------------------------------------------
  clusterID = getConfigIDs( clusterName, 'ServerCluster' );
  if clusterID == '' :
    print badClust % locals();
    Usage( cmdName );

  #-------------------------------------------------------------------
  # Is it possible for getConfigIDs() to return multiple clusters with
  # the same name?  I don't think so, but it is really easy to check
  # for...
  #-------------------------------------------------------------------
  if len( clusterID.splitlines() ) > 1 :
    print ambClust % locals();
    Usage( cmdName );

- Note: The print statements are making use of mapped messages that
        contain the names of variables to be substituted as part of
        the message generation.  For example, the badClust string
        was assigned a value of:
        
        badClust = '%(cmdName)s: Unknown cluster %(clusterName)s';
        
        and the expression: "badClust % locals()" causes the variables
        identified in the string to be replaced by the value formatted
        as a string (the %()s syntax indicates this).  The locals()
        function returns a dictionary of the "local variables", the
        values of which are used to generate the message to be
        displayed.

- Then we need to add code to check that the specified node exists and
  is unambiguous.
  Note: This version of the script is available in createClusterMember.03.py
  
  The code to do this is as simple as:
  
  #-------------------------------------------------------------------
  # Does the node exist?
  #-------------------------------------------------------------------
  nodeID = getConfigIDs( nodeName, 'Node' );
  if nodeID == '' :
    print badNode % locals();
    Usage( cmdName );

  #-------------------------------------------------------------------
  # Is it possible for getConfigIDs() to return multiple nodes with
  # the same name?  No, not really.  However, it is really easy to add
  # a check for an ambiguous result.
  #-------------------------------------------------------------------
  if len( nodeID.splitlines() ) > 1 :
    print ambNode % locals();
    Usage( cmdName );

- Next, we want to check that the specified member doesn't exist on
  the specified node.  We could make use of the getConfigIDs() routine
  asis, and process the result, or, we could consider adding a new
  parameter to this routine so that we can specify the configuration
  scope to be "searched".  That certainly sounds promising.  What would
  that take?
  
  #---------------------------------------------------------------------
  # Name: getConfigIDs()
  # Role: Function used find, and return a string containing all
  #       matching configuration IDs.
  # e.g., We can have multiple Cluster Members with the same name as
  #       long as each name is unique to the node on which it is
  #       configured.
  #---------------------------------------------------------------------
  def getConfigIDs( name, dataType, scopeID = None ) :
    result = [];                              # Start with an empty list
    if scopeID :                              # If a scope configID is provided...
      items = AdminConfig.list( dataType, scopeID );
    else :                                    #
      items = AdminConfig.list( dataType );   # unscoped item list
    for configID in items.splitlines() :      # Process each configID
      ID = configID                           # Leave configID alone...
      if ( ID[ 0 ] == '"' ) and ( ID[ -1 ] == '"' ) :
        ID = ID[ 1:-1 ];                      # Strip leading/trailing quotes
      if name == ID.split( '(', 1 )[ 0 ] :    # Does this config name match?
        result.append( configID );            #   Yes - Specified  name found
    return '\n'.join( result );               # Return string of all matches

- If we do this, the code to look for the specified member in an
  existing node can be as simple as:
  
  #-------------------------------------------------------------------
  # Does the member already exist on this node?
  #-------------------------------------------------------------------
  memberID = getConfigIDs( memberName, 'ClusterMember', nodeID );
  if memberID != '' :
    print conflict % locals();
    Usage( cmdName );

  Wow, that's pretty slick.
  
- What's left?  Well, all we have to do now is to add the rest of the
  pseudo-code to use these validated variables:
  
  if localMode() :
    if DMpresent() :
      createClusterMember()
      save()
    else :
      ... problem: createClusterMember doesn't make sense for this configuration
  else :
    cell  = AdminControl.getCell()
    node  = AdminControl.getNode()
    oName = 'cell=%s,node=%s,type=Server,*' % ( cell, node )
    sObj  = AdminControl.completeObjectName( oName )
    pType = AdminControl.getAttribute( sObj, 'processType' )
    if pType == 'DeploymentManager' :
      createClusterMember()
      save()
      synchronize()
    else :
      ... problem: createClusterMember doesn't make sense for this configuration

- The code to do this can be ound in createClusterMember.05.py

- After making the changes, let's take it out for a test drive...
--------------------------------------------------------------------------------
C:\IBM\WebSphere\AppServer\bin>wsadmin -WAuJ -profileName Dmgr01 -f createClusterMember.py -LC1 -nragweedNode01 -mM1
WASX7209I: Connected to process "dmgr" on node ragweedCellManager01 using SOAP connector;  The type of process is: DeploymentMan
ager
WASX7303I: The following options are passed to the scripting environment and are available as arguments that are stored in the a
rgv variable: "[-WAuJ, -LC1, -nragweedNode01, -mM1]"
createClusterMember: --clusterName C1 --memberName M1 --nodeName ragweedNode01
WASX7017E: Exception received while running file "createClusterMember.py"; exception information: com.ibm.websphere.management.e
xception.ConfigServiceException
com.ibm.websphere.management.exception.ConfigServiceException
com.ibm.websphere.management.cmdframework.CommandValidationException: ADMG9249E: Exception caught validating the memberConfig st
ep of the createClusterMember task command: com.ibm.websphere.management.cmdframework.CommandValidationException: ADMG9217E: Ser
ver M1 already exists on node ragweedNode01.
--------------------------------------------------------------------------------

- Oh oh.  We forgot to protect ourselves from failure... specifically, we really
  should surround the AdminConf method calls with a try/escape construct.

- Adding these try/escape clauses around the AdminConfig calls gets us to the
  code found in createClusterMember.06.py
  What does the same execution look like now?
--------------------------------------------------------------------------------
C:\IBM\WebSphere\AppServer\bin>wsadmin -WAuJ -profileName Dmgr01 -f createClusterMember.py -LC1 -nragweedNode01 -mM1
WASX7209I: Connected to process "dmgr" on node ragweedCellManager01 using SOAP connector;  The type of process is: DeploymentMan
ager
WASX7303I: The following options are passed to the scripting environment and are available as arguments that are stored in the a
rgv variable: "[-WAuJ, -LC1, -nragweedNode01, -mM1]"
createClusterMember: --clusterName C1 --memberName M1 --nodeName ragweedNode01
createClusterMember: An unexpected exception occurred.

  Exception  type: "com.ibm.ws.scripting.ScriptingException"
  Exception value: "com.ibm.ws.scripting.ScriptingException: com.ibm.websphere.management.exception.ConfigServiceException
com.ibm.websphere.management.exception.ConfigServiceException
com.ibm.websphere.management.cmdframework.CommandValidationException: ADMG9249E: Exception caught validating the memberConfig st
ep of the createClusterMember task command: com.ibm.websphere.management.cmdframework.CommandValidationException: ADMG9217E: Ser
ver M1 already exists on node ragweedNode01.
"
--------------------------------------------------------------------------------

- Hm.  This is a common enough "error" condition that we probably want to add
  some code to specifically check for it.  This code is available in
  createClusterMember.py
  
- When we test this version, we see:
--------------------------------------------------------------------------------
C:\IBM\WebSphere\AppServer\bin>wsadmin -WAuJ -profileName Dmgr01 -f createClusterMember.py -LC1 -nragweedNode01 -mM1
WASX7209I: Connected to process "dmgr" on node ragweedCellManager01 using SOAP connector;  The type of process is: DeploymentMan
ager
WASX7303I: The following options are passed to the scripting environment and are available as arguments that are stored in the a
rgv variable: "[-WAuJ, -LC1, -nragweedNode01, -mM1]"
createClusterMember: --clusterName C1 --memberName M1 --nodeName ragweedNode01
ADMG9217E: Server M1 already exists on node ragweedNode01.
--------------------------------------------------------------------------------

- What about in local mode?
--------------------------------------------------------------------------------
C:\IBM\WebSphere\AppServer\bin>wsadmin -WAuJ -profileName Dmgr01 -conntype none -f createClusterMember.py -LC1 -nragweedNode01 -
mM1
WASX7357I: By request, this scripting client is not connected to any server process. Certain configuration and application opera
tions will be available in local mode.
WASX7303I: The following options are passed to the scripting environment and are available as arguments that are stored in the a
rgv variable: "[-WAuJ, -LC1, -nragweedNode01, -mM1]"
createClusterMember: --clusterName C1 --memberName M1 --nodeName ragweedNode01
ADMG9217E: Server M1 already exists on node ragweedNode01.
--------------------------------------------------------------------------------

- That's looking pretty good.  What happens if we try to create a new member
  (i.e. one that doesn't currently exist)?
  
--------------------------------------------------------------------------------
C:\IBM\WebSphere\AppServer\bin>wsadmin -WAuJ -profileName Dmgr01 -f createClusterMember.py -LC1 -nragweedNode01 -mM3
WASX7209I: Connected to process "dmgr" on node ragweedCellManager01 using SOAP connector;  The type of process is: DeploymentMan
ager
WASX7303I: The following options are passed to the scripting environment and are available as arguments that are stored in the a
rgv variable: "[-WAuJ, -LC1, -nragweedNode01, -mM3]"
createClusterMember: --clusterName C1 --memberName M3 --nodeName ragweedNode01
--------------------------------------------------------------------------------

- And what about in local mode?
--------------------------------------------------------------------------------
C:\IBM\WebSphere\AppServer\bin>wsadmin -WAuJ -profileName Dmgr01 -conntype none -f createClusterMember.py -LC1 -nragweedNode01 -
mM4
WASX7357I: By request, this scripting client is not connected to any server process. Certain configuration and application opera
tions will be available in local mode.
WASX7303I: The following options are passed to the scripting environment and are available as arguments that are stored in the a
rgv variable: "[-WAuJ, -LC1, -nragweedNode01, -mM4]"
createClusterMember: --clusterName C1 --memberName M4 --nodeName ragweedNode01
--------------------------------------------------------------------------------

- At this point, it appears to be looking quite reasonable.  This doesn't mean
  that there improvements couldn't be made.  But, it is a start.
  
  Hopefully you found this step by step approach helpful, and useful.
